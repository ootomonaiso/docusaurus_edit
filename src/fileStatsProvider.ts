import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

export interface FileStats {
	filePath: string;
	fileName: string;
	charCount: number;
	wordCount: number;
	lineCount: number;
	readingTime: number; // ÂàÜÂçò‰Ωç
	lastModified: Date;
	fileSize: number; // „Éê„Ç§„ÉàÂçò‰Ωç
}

export class FileStatsTreeItem extends vscode.TreeItem {
	constructor(
		public readonly label: string,
		public readonly collapsibleState: vscode.TreeItemCollapsibleState,
		public readonly stats?: FileStats,
		public readonly isStatsItem?: boolean
	) {
		super(label, collapsibleState);
		
		if (isStatsItem && stats) {
			this.contextValue = 'fileStats';
			this.iconPath = new vscode.ThemeIcon('info');
			this.description = this.formatStatsDescription();
		} else {
			this.contextValue = 'file';
			this.iconPath = new vscode.ThemeIcon('file');
			this.command = {
				command: 'vscode.open',
				title: 'Open File',
				arguments: [vscode.Uri.file(stats?.filePath || '')]
			};
		}
	}

	private formatStatsDescription(): string {
		if (!this.stats) {
			return '';
		}
		const readingTime = this.stats.readingTime < 1 
			? `${Math.ceil(this.stats.readingTime * 60)}Áßí`
			: `${Math.ceil(this.stats.readingTime)}ÂàÜ`;
		return `${this.stats.charCount}ÊñáÂ≠ó ‚Ä¢ ${readingTime}`;
	}
}

export class FileStatsProvider implements vscode.TreeDataProvider<FileStatsTreeItem> {
	private _onDidChangeTreeData: vscode.EventEmitter<FileStatsTreeItem | undefined | null | void> = new vscode.EventEmitter<FileStatsTreeItem | undefined | null | void>();
	readonly onDidChangeTreeData: vscode.Event<FileStatsTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;

	private fileStats: Map<string, FileStats> = new Map();

	constructor(private docusaurusRoot: string, private contentType: 'docs' | 'blog' = 'docs') {
		this.refreshStats();
	}

	refresh(): void {
		this.refreshStats();
		this._onDidChangeTreeData.fire();
	}

	setContentType(contentType: 'docs' | 'blog'): void {
		this.contentType = contentType;
		this.refresh();
	}

	getTreeItem(element: FileStatsTreeItem): vscode.TreeItem {
		return element;
	}

	getChildren(element?: FileStatsTreeItem): Promise<FileStatsTreeItem[]> {
		if (!element) {
			// „É´„Éº„Éà„É¨„Éô„É´ - „Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíËøî„Åô
			return Promise.resolve(this.getFileList());
		} else if (element.stats && !element.isStatsItem) {
			// „Éï„Ç°„Ç§„É´„Éé„Éº„Éâ - Áµ±Ë®àÊÉÖÂ†±„ÇíËøî„Åô
			return Promise.resolve(this.getStatsForFile(element.stats));
		}
		
		return Promise.resolve([]);
	}

	private getFileList(): FileStatsTreeItem[] {
		const items: FileStatsTreeItem[] = [];
		
		for (const [filePath, stats] of this.fileStats) {
			const item = new FileStatsTreeItem(
				stats.fileName,
				vscode.TreeItemCollapsibleState.Collapsed,
				stats,
				false
			);
			items.push(item);
		}

		return items.sort((a, b) => a.label.localeCompare(b.label));
	}

	private getStatsForFile(stats: FileStats): FileStatsTreeItem[] {
		const items: FileStatsTreeItem[] = [];

		// Ë™≠‰∫ÜÊôÇÈñì
		const readingTimeText = stats.readingTime < 1 
			? `${Math.ceil(stats.readingTime * 60)}Áßí`
			: `${Math.ceil(stats.readingTime)}ÂàÜ`;
		
		// „Ç≥„É≥„Éë„ÇØ„Éà„Å´‰∏ªË¶Å„Å™ÊÉÖÂ†±„Å†„ÅëË°®Á§∫
		items.push(new FileStatsTreeItem(
			`${stats.charCount.toLocaleString()}ÊñáÂ≠ó ‚Ä¢ ${readingTimeText}`,
			vscode.TreeItemCollapsibleState.None,
			stats,
			true
		));

		items.push(new FileStatsTreeItem(
			`${stats.lineCount}Ë°å ‚Ä¢ ${this.formatFileSize(stats.fileSize)}`,
			vscode.TreeItemCollapsibleState.None,
			stats,
			true
		));

		return items;
	}

	private refreshStats(): void {
		this.fileStats.clear();
		
		if (!this.docusaurusRoot) {
			console.warn('Docusaurus root not set');
			return;
		}
		
		const contentPath = path.join(this.docusaurusRoot, this.contentType);
		if (!fs.existsSync(contentPath)) {
			console.warn(`Content path does not exist: ${contentPath}`);
			return;
		}

		this.scanDirectory(contentPath);
	}

	private scanDirectory(dirPath: string): void {
		try {
			const entries = fs.readdirSync(dirPath, { withFileTypes: true });
			
			for (const entry of entries) {
				const fullPath = path.join(dirPath, entry.name);
				
				if (entry.isDirectory() && !entry.name.startsWith('.')) {
					// „Çµ„Éñ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÜçÂ∏∞ÁöÑ„Å´„Çπ„Ç≠„É£„É≥
					this.scanDirectory(fullPath);
				} else if (entry.isFile() && this.isMarkdownFile(entry.name)) {
					// Markdown„Éï„Ç°„Ç§„É´„ÅÆÁµ±Ë®à„ÇíË®àÁÆó
					const stats = this.calculateFileStats(fullPath);
					if (stats) {
						this.fileStats.set(fullPath, stats);
					}
				}
			}
		} catch (error) {
			console.error('Error scanning directory:', error);
		}
	}

	private isMarkdownFile(fileName: string): boolean {
		const ext = path.extname(fileName).toLowerCase();
		return ext === '.md' || ext === '.mdx';
	}

	private calculateFileStats(filePath: string): FileStats | null {
		try {
			if (!fs.existsSync(filePath)) {
				console.warn(`File does not exist: ${filePath}`);
				return null;
			}

			const content = fs.readFileSync(filePath, 'utf8');
			const stats = fs.statSync(filePath);
			
			// „Éï„É≠„É≥„Éà„Éû„Çø„Éº„ÇíÈô§Âéª„Åó„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó
			const contentWithoutFrontmatter = this.removeFrontmatter(content);
			
			// Âü∫Êú¨Áµ±Ë®à„ÇíË®àÁÆó
			const charCount = contentWithoutFrontmatter.length;
			const wordCount = this.countWords(contentWithoutFrontmatter);
			const lineCount = content.split('\n').length;
			
			// Ë™≠‰∫ÜÊôÇÈñì„ÇíË®àÁÆóÔºàÊó•Êú¨Ë™û: 400-500ÊñáÂ≠ó/ÂàÜ„ÄÅËã±Ë™û: 200-250ÂçòË™û/ÂàÜÔºâ
			const readingTime = this.calculateReadingTime(contentWithoutFrontmatter, wordCount);
			
			return {
				filePath,
				fileName: path.basename(filePath),
				charCount,
				wordCount,
				lineCount,
				readingTime,
				lastModified: stats.mtime,
				fileSize: stats.size
			};
		} catch (error) {
			console.error(`Error calculating stats for ${filePath}:`, error);
			return null;
		}
	}

	private removeFrontmatter(content: string): string {
		// YAML„Éï„É≠„É≥„Éà„Éû„Çø„Éº„ÇíÈô§Âéª
		const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
		return content.replace(frontmatterRegex, '');
	}

	private countWords(text: string): number {
		// Êó•Êú¨Ë™û„Å®Ëã±Ë™û„ÅÆÂçòË™û„Çí„Ç´„Ç¶„É≥„Éà
		// Êó•Êú¨Ë™ûÊñáÂ≠óÔºà„Å≤„Çâ„Åå„Å™„ÄÅ„Ç´„Çø„Ç´„Éä„ÄÅÊº¢Â≠óÔºâ
		const japaneseChars = (text.match(/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g) || []).length;
		
		// Ëã±Ë™û„ÅÆÂçòË™û
		const englishWords = text
			.replace(/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g, ' ') // Êó•Êú¨Ë™ûÊñáÂ≠ó„ÇíÁ©∫ÁôΩ„Å´ÁΩÆÊèõ
			.split(/\s+/)
			.filter(word => word.length > 0 && /[a-zA-Z]/.test(word)).length;
		
		// Êó•Êú¨Ë™ûÊñáÂ≠ó„ÅØ1ÊñáÂ≠ó1ÂçòË™û„ÄÅËã±Ë™û„ÅØÂçòË™ûÊï∞„Åß„Ç´„Ç¶„É≥„Éà
		return japaneseChars + englishWords;
	}

	private calculateReadingTime(content: string, wordCount: number): number {
		// Êó•Êú¨Ë™ûÊñáÂ≠óÊï∞„ÇíÂèñÂæó
		const japaneseChars = (content.match(/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/g) || []).length;
		
		// Ëã±Ë™ûÂçòË™ûÊï∞ÔºàÁ∑èÂçòË™ûÊï∞„Åã„ÇâÊó•Êú¨Ë™ûÊñáÂ≠óÊï∞„ÇíÂºï„ÅèÔºâ
		const englishWords = Math.max(0, wordCount - japaneseChars);
		
		// Ë™≠‰∫ÜÊôÇÈñìË®àÁÆó
		// Êó•Êú¨Ë™û: 450ÊñáÂ≠ó/ÂàÜ
		// Ëã±Ë™û: 225ÂçòË™û/ÂàÜ
		const japaneseReadingTime = japaneseChars / 450;
		const englishReadingTime = englishWords / 225;
		
		return Math.max(0.1, japaneseReadingTime + englishReadingTime); // ÊúÄ‰Ωé0.1ÂàÜ
	}

	private formatFileSize(bytes: number): string {
		if (bytes === 0) {
			return '0 B';
		}
		
		const k = 1024;
		const sizes = ['B', 'KB', 'MB', 'GB'];
		const i = Math.floor(Math.log(bytes) / Math.log(k));
		
		return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
	}

	// ÁèæÂú®ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Çã„Éï„Ç°„Ç§„É´„ÅÆÁµ±Ë®à„ÇíÂèñÂæó
	public getStatsForCurrentFile(): FileStats | null {
		const activeEditor = vscode.window.activeTextEditor;
		if (!activeEditor) {
			return null;
		}

		const filePath = activeEditor.document.fileName;
		return this.fileStats.get(filePath) || null;
	}

	// „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç®„Éá„Ç£„Çø„ÅÆÁµ±Ë®à„Çí„É™„Ç¢„É´„Çø„Ç§„É†„ÅßË®àÁÆó
	public getStatsForActiveEditor(): FileStats | null {
		const activeEditor = vscode.window.activeTextEditor;
		if (!activeEditor) {
			console.log('üìä No active editor');
			return null;
		}

		const document = activeEditor.document;
		console.log('üìä Checking file:', document.fileName);
		
		if (!this.isMarkdownFile(document.fileName)) {
			console.log('üìä Not a markdown file');
			return null;
		}

		console.log('üìä Processing markdown file');

		// „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÁèæÂú®„ÅÆÂÜÖÂÆπ„Åã„ÇâÁµ±Ë®à„ÇíË®àÁÆó
		const content = document.getText();
		const contentWithoutFrontmatter = this.removeFrontmatter(content);
		
		const charCount = contentWithoutFrontmatter.length;
		const wordCount = this.countWords(contentWithoutFrontmatter);
		const lineCount = content.split('\n').length;
		const readingTime = this.calculateReadingTime(contentWithoutFrontmatter, wordCount);

		const result = {
			filePath: document.fileName,
			fileName: path.basename(document.fileName),
			charCount,
			wordCount,
			lineCount,
			readingTime,
			lastModified: new Date(), // ÁèæÂú®ÊôÇÂàª
			fileSize: Buffer.byteLength(content, 'utf8')
		};

		console.log('üìä Calculated stats:', result);
		return result;
	}

	// ÂÖ®‰ΩìÁµ±Ë®à„ÇíÂèñÂæó
	public getOverallStats(): {
		totalFiles: number;
		totalCharacters: number;
		totalWords: number;
		totalReadingTime: number;
		averageReadingTime: number;
	} {
		let totalCharacters = 0;
		let totalWords = 0;
		let totalReadingTime = 0;
		const totalFiles = this.fileStats.size;

		for (const stats of this.fileStats.values()) {
			totalCharacters += stats.charCount;
			totalWords += stats.wordCount;
			totalReadingTime += stats.readingTime;
		}

		return {
			totalFiles,
			totalCharacters,
			totalWords,
			totalReadingTime,
			averageReadingTime: totalFiles > 0 ? totalReadingTime / totalFiles : 0
		};
	}
}
