name: "Build and Release"

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  workflow_dispatch:

# GitHubリリース作成のための権限を追加
permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm ci
    
    - name: Update CHANGELOG
      run: |
        # リポジトリ情報を設定
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # CHANGELOGを更新
        npm run changelog
        
        # CHANGELOGが更新されたかチェック
        if [[ -n $(git status --porcelain CHANGELOG.md) ]]; then
          echo "CHANGELOG.md was updated, committing changes"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for v$(node -p "require('./package.json').version")"
          git push
        else
          echo "No changes to CHANGELOG.md"
        fi
    
    - name: Run linter
      run: npm run lint
    
    - name: Compile TypeScript
      run: npm run compile
    
    - name: Setup Xvfb
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=':99.0'
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99.0" >> $GITHUB_ENV
    
    - name: Run tests
      if: runner.os == 'Linux'
      run: xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" npm test
    
    # VSCEはすでに依存関係として追加されているので、グローバルインストール不要
    - name: Package extension
      run: npm run release
    
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-vsix
        path: '*.vsix'
        retention-days: 30
    
    - name: Get version from package.json
      id: get_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Extension version: v$VERSION"
    
    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Node.jsスクリプトを使用してリリースノートを生成
        npm run release-notes ${{ steps.get_version.outputs.version }}
    
    - name: Create Release
      if: steps.check_tag.outputs.tag_exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Docusaurus Editor ${{ steps.get_version.outputs.version }}
        body: |
          ## Docusaurus Editor ${{ steps.get_version.outputs.version }}
          
          ${{ steps.release_notes.outputs.release_notes }}
          
          ${{ steps.release_notes.outputs.additional_info }}
          
          ### インストール方法
          1. リリースから `.vsix` ファイルをダウンロード
          2. VS Code で `Extensions: Install from VSIX...` コマンドを実行
          3. ダウンロードした `.vsix` ファイルを選択
          
          または、VS Code マーケットプレースからインストールしてください。
        draft: false
        prerelease: false
        files: |
          *.vsix
    
    # オプション: VS Code マーケットプレースに自動公開 (タグのプッシュ時のみ)
    # 注: マーケットプレースへの公開準備ができたら以下を使用してください
    - name: Publish to VS Code Marketplace
      if: startsWith(github.ref, 'refs/tags/v')
      run: npx @vscode/vsce publish --packagePath $(ls *.vsix)
      env:
        VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
      continue-on-error: true
    #   continue-on-error: true
